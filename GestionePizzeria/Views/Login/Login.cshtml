@model GestionePizzeria.Models.Utente

@{
    ViewBag.Title = "Login";
    var feedBack = Session["Messaggio"];
    bool inserimento = (bool)TempData["Inserimento"];
    bool good = true;
    if (inserimento) {
         good = (bool)Session["Good"];
    }

}


<div class="offcanvas offcanvas-start show showing glass-red zindex-login swing-in-left-bck" data-bs-backdrop="static" tabindex="-1" id="offcanvasExample" aria-labelledby="offcanvasExampleLabel">
    <div class="offcanvas-header">
        <h3 class="offcanvas-title text-white display-6" id="offcanvasExampleLabel">Login</h3>
        <div class="ms-auto">
            @Html.ActionLink("Home", "Index", "Home", new { area = "" }, new { @class = "btn btn-warning" })
        </div>

    </div>
    @if(good){ 
    <div id="alert" class="alert alert-success @((inserimento == true ? "d-block" : "d-none" )) " role="alert">
        @feedBack
    </div>
    }
    else 
    { 
    <div id="alert" class="alert alert-warning @((inserimento == true ? "d-block" : "d-none" )) " role="alert">
        @feedBack
    </div>
    }
    
    <div class="offcanvas-body">


        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()

            <div class="form-horizontal fs-5">
                <hr />
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="form-group">
                    @Html.LabelFor(model => model.Username, htmlAttributes: new { @class = "control-label col-md-2 text-white" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Username, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Username, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group mt-3">
                    @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label col-md-2 text-white" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control", type = "password" } })
                        @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group d-flex">
                    <div class="">
                        <input type="submit" value="Login" class="btn btn-dark mt-3" />
                    </div>
                    <div class="ms-auto">
                        @Html.ActionLink("Registrati", "Create", "Utente", new { area = "" }, new { @class = "btn btn-danger mt-3" })
                    </div>
                </div>


            </div>
        }
       


    </div>
</div>

<script>
    // Verifica se c'è un feedback da mostrare e mostra l'alert se presente
    var alertDiv = document.getElementById('alert');
    if (alertDiv.classList.contains('d-block')) {
        setTimeout(function () {
            alertDiv.classList.remove('d-none');
            alertDiv.classList.add('d-none'); // Rimuovi la classe per nascondere l'alert dopo 4 secondi
        }, 4000);
    }
</script>